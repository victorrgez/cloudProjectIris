name: CI/CD pipeline
on:
  push:
    branches:
      - main
      - cicd
env:
  DOCK_USER: ${{ secrets.DOCK_USER }}
  DOCK_PASS: ${{ secrets.DOCK_PASS }}
  GCP_GKE_CLUSTER: ${{ secrets.GCP_GKE_CLUSTER }}
  GCP_GKE_ZONE: ${{ secrets.GCP_GKE_ZONE }}
  GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
  SA: ${{ secrets.SA }}

# Basic tests will be run on both branches. However, Integration and End-To-End tests will be run only on `main` branch
# when [SRC] is added at the start of the commit message. Same logic is applied to build and push Docker images.
jobs:
  RunFrontBackTests:
    runs-on: ubuntu-latest
    container:
      image:
        python:3.9-slim
    steps:
      - name: Copy repo files to container
        uses: actions/checkout@v3
      - name: Install test dependencies
        run: pip3 install -r tests/requirements.txt
      - name: Run tests
        # Ignores other tests that are run in different jobs with other requirements:
        run: pytest -v --ignore=tests/test_irismodel.py --ignore=tests/test_integrationMySQL.py --ignore=tests/test_End2End.py
      - run: echo "All Frontend/Backend tests run succesfully"
  RunModelTests:
    runs-on: ubuntu-latest
    container:
      image:
        python:3.9-slim
    steps:
      - name: Copy repo files to container
        uses: actions/checkout@v3
      - name: Install test dependencies
        run: pip3 install -r tests/irismodelrequirements.txt
      - name: Run tests
        # The following flag gets rids of the deprecation warning of "Imp" module:
        run: pytest -v -W ignore::DeprecationWarning tests/test_irismodel.py
      - run: echo "All Model tests run succesfully"
  RunMySQLIntegrationTests:
    if: github.ref == 'refs/heads/main' && startsWith(github.event.head_commit.message, '[SRC]')
    runs-on: ubuntu-latest
    steps:
      - name: Copy repo files to container
        uses: actions/checkout@v3
      - name: Build MySQL image
        run: docker build -t mysqlimage src/mysql3306
      - name: Run MySQL image in the background
        run: docker run -d --rm --name mysql -p=0.0.0.0:3306:3306 mysqlimage
      - name: Install dependencies
        run: pip3 install -r tests/requirements.txt
      - name: Run Integration tests
        run: pytest -v -s tests/test_integrationMySQL.py
  BuildAndPushToDockerHub:
    if: github.ref == 'refs/heads/main' && startsWith(github.event.head_commit.message, '[SRC]')
    needs:
      - RunFrontBackTests
      - RunModelTests
      - RunMySQLIntegrationTests
    runs-on: ubuntu-latest
    steps:
      - name: Copy repo files to container
        uses: actions/checkout@v3
      - name: Login DockerHub
        run: docker login -u $DOCK_USER -p $DOCK_PASS;
      - name: Build Images
        run: >
          docker build -t victorrgez/cloudprojectirismysql src/mysql3306;
          docker build -t victorrgez/cloudprojectirismodel src/irismodel3000;
          docker build -t victorrgez/cloudprojectirisfrontend src/frontend5000;
          docker build -t victorrgez/cloudprojectirisbackend src/backend8080;
      - name: Push Images
        run: >
          docker push victorrgez/cloudprojectirismysql;
          docker push victorrgez/cloudprojectirismodel;
          docker push victorrgez/cloudprojectirisfrontend;
          docker push victorrgez/cloudprojectirisbackend;
  RunEndToEndTests:
    if: github.ref == 'refs/heads/main' && startsWith(github.event.head_commit.message, '[SRC]')
    needs: BuildAndPushToDockerHub
    runs-on: ubuntu-latest
    steps:
      - name: Copy repo files to container
        uses: actions/checkout@v3
      - name: Login DockerHub
        run: docker login -u $DOCK_USER -p $DOCK_PASS;
      - name: Run Containers
        run: >
          docker network create cloudprojectiris;
          docker run -d --name mysql --net cloudprojectiris victorrgez/cloudprojectirismysql;
          docker run -d --name model --net cloudprojectiris victorrgez/cloudprojectirismodel;
          docker run -d -p=0.0.0.0:5000:5000 --name frontend --net cloudprojectiris victorrgez/cloudprojectirisfrontend;
          docker run -d --name backend --net cloudprojectiris victorrgez/cloudprojectirisbackend;
      - name: Install dependencies
        run: pip3 install -r tests/requirements.txt
      - name: Run End To End tests
        run: pytest -v tests/test_End2End.py
  DeployToGKE:
    if: github.ref == 'refs/heads/main' && startsWith(github.event.head_commit.message, '[SRC]')
    needs: RunEndToEndTests
    runs-on: ubuntu-latest
    container:
      image: google/cloud-sdk
    steps:
      - name: Copy repo files to container
        uses: actions/checkout@v3
      - name: Activate gcloud
        run: >
          echo "$SA" > remove.json;
          chmod 400 remove.json;
          ls -lh;
          gcloud auth activate-service-account --key-file remove.json;
          rm remove.json;
          gcloud config set project $GCP_PROJECT;
      - name: Activate Kubectl
        run: gcloud container clusters get-credentials $GCP_GKE_CLUSTER --zone $GCP_GKE_ZONE
      - name: Deployment to kubernetes
        run: cd kubernetesYAMLFiles && kubectl apply -f .
